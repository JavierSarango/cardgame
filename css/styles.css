/* Variables */
:root {
  --card-width: 70px;
  --card-height: 100px;
  --card-radius: 8px;
  --flip-duration: 0.6s; /* Ajustar si es necesario */
  --move-duration: 0.5s; /* Ajustar si es necesario */
}

/* Área de juego */
#gameArea {
    width: 100%;
    height: 100%;
    position: relative;
    overflow: visible;
}


.card {
  width: var(--card-width);
  height: var(--card-height);
  position: absolute;
  cursor: pointer;
  transform-style: preserve-3d;
  transition: transform var(--flip-duration) ease; /* Asegúrate que esta transición sea solo para el transform principal del .card */
  border-radius: var(--card-radius);
  box-shadow: 0 3px 10px rgba(0,0,0,0.2);
  z-index: 10;
}

/* --- CORRECCIÓN AQUÍ --- */

/* Estado inicial: boca arriba (frente visible) - ESTO ES LO CONVENCIONAL */
/* La carta no tiene 'transform' por defecto o es 'rotateY(0deg)' */
.card {
  transform: rotateY(0deg); /* La carta se crea mostrando su frente */
}

/* Estado volteado: boca abajo (reverso visible) - Cuando tiene la clase 'flipped' */
.card.flipped {
  transform: rotateY(180deg); /* La carta se voltea para mostrar su reverso */
}

/* Caras de la carta */
.card-face {
  position: absolute;
  width: 100%;
  height: 100%;
  backface-visibility: hidden;
  border-radius: var(--card-radius);
  background-size: cover;
  background-repeat: no-repeat;
  background-position: center;
}

/* Frente de la carta (siempre orientado hacia adelante) */
.card-front {
  background-color: white;
  transform: rotateY(0deg); /* Su orientación base es 0deg */
}

/* Reverso de la carta (girado para estar en la parte trasera) */
.card-back {
  background-color: white;
  transform: rotateY(180deg); /* Está 180deg rotado respecto al frente */
}

/* --- FIN CORRECCIÓN --- */


/* Montones */
.stack {
    width: 70px;
    height: 100px;
    position: absolute;
    display: flex;
    justify-content: center;
    align-items: center;
    font-size: 1.8rem;
    color: rgba(255,255,255,0.8);
    background: rgba(0,0,0,0.2);
    border-radius: var(--card-radius);
    z-index: 0;
}

.stack::after {
    position: absolute;
    color: white;
    font-size: 1rem;
    bottom: -25px;
    text-shadow: 0 1px 3px rgba(0,0,0,0.5);
}

.stack.active {
    border: 2px solid gold;
    box-shadow: 0 0 15px rgba(255,215,0,0.5);
    background: rgba(255,215,0,0.1);
}

.stack.completed {
    border: 2px solid #00ff00;
    box-shadow: 0 0 15px rgba(0,255,0,0.3);
}

/* Stack central (K) */
#stack13 {
    background: rgba(255,215,0,0.1);
    border: 2px solid gold;
    box-shadow: 0 0 15px rgba(255,215,0,0.5);
    font-size: 2.2rem;
}

/* Animaciones */
/* Si usas las transiciones en JS, estas animaciones @keyframes 'dealCard' y 'flipCard'
   podrían ya no ser necesarias o necesitarán ser ajustadas para no entrar en conflicto.
   Mantener la 'transition' en .card es lo importante. */

/* Ajustar o quitar si hay conflicto con el control JS */
/*@keyframes dealCard {
    0% { transform: translate(var(--startX), var(--startY)) rotate(0deg); }
    100% { transform: translate(0, 0) rotate(var(--rotation)); }
}*/

/* Si no usas .card-shuffle en JS, esto no afecta */
.card-shuffle {
    animation: shuffleAnimation 1.5s forwards;
}

/*@keyframes shuffleAnimation {
    0% { transform: translate(0, 0) rotate(0); }
    100% { transform: translate(var(--endX), var(--endY)) rotate(var(--rotation)); }
}*/

/* Ajustar o quitar si hay conflicto con el control JS */
/* .card-flip {
    animation: flipCard var(--flip-speed) forwards;
}

@keyframes flipCard {
    0% { transform: rotateY(0); }
    100% { transform: rotateY(180deg); }
} */


.win-message {
    animation: pulse 2s infinite;
}

@keyframes pulse {
    0% { transform: scale(1); }
    50% { transform: scale(1.05); }
    100% { transform: scale(1); }
}